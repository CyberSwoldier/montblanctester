from fpdf import FPDF
import argparse
import json
import logging
from typing import Dict

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("report.log"),
        logging.StreamHandler()
    ]
)

class ReportGenerator:
    def __init__(self, data: Dict, output: str):
        self.data = data
        self.output = output

    def generate_pdf(self):
        """Generate a PDF report from the data."""
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)

        # Title
        pdf.cell(200, 10, txt="Penetration Testing Report", ln=True, align="C")

        # Content
        for section, content in self.data.items():
            pdf.set_font("Arial", size=12, style="B")
            pdf.cell(200, 10, txt=section.upper(), ln=True)
            pdf.set_font("Arial", size=10)
            pdf.multi_cell(0, 10, txt=str(content))

        pdf.output(self.output)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Automated Report Generator")
    parser.add_argument("-d", "--data", required=True, help="JSON file with report data")
    parser.add_argument("-o", "--output", required=True, help="Output PDF file")
    args = parser.parse_args()

    with open(args.data, "r") as f:
        data = json.load(f)

    generator = ReportGenerator(data, args.output)
    generator.generate_pdf()

    logging.info(f"Report generated: {args.output}")
