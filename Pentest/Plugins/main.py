import argparse
import json
import logging
from recon import ReconTool
from scan import VulnerabilityScanner
from exploit import ExploitTool
from post_exploit import PostExploitTool
from report import ReportGenerator

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("pentest.log"),
        logging.StreamHandler()
    ]
)

def main(target: str, output: str):
    # Run all phases
    recon_results = ReconTool(target).run_all()
    scan_results = VulnerabilityScanner(target).run()
    exploit_results = ExploitTool(target).run()
    post_exploit_results = PostExploitTool(target).run()

    # Combine results
    full_report = {
        "recon": recon_results,
        "scan": scan_results,
        "exploit": exploit_results,
        "post_exploit": post_exploit_results
    }

    # Save and generate report
    with open("report_data.json", "w") as f:
        json.dump(full_report, f, indent=2)

    ReportGenerator(full_report, output).generate_pdf()
    logging.info(f"Full report saved to {output}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Automated Penetration Testing Framework")
    parser.add_argument("-t", "--target", required=True, help="Target IP or domain")
    parser.add_argument("-o", "--output", default="report.pdf", help="Output PDF file")
    args = parser.parse_args()

    main(args.target, args.output)
