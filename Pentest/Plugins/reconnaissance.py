import requests
import dns.resolver
import whois
import argparse
import logging
from concurrent.futures import ThreadPoolExecutor
from typing import List, Dict, Optional

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("recon.log"),
        logging.StreamHandler()
    ]
)

class ReconTool:
    def __init__(self, domain: str):
        self.domain = domain

    def subdomain_enumeration(self) -> List[str]:
        """Enumerate subdomains using crt.sh."""
        url = f"https://crt.sh/?q=%.{self.domain}&output=json"
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                subdomains = {entry['name_value'].lower() for entry in data}
                return sorted(subdomains)
            else:
                logging.error(f"Failed to fetch data. Status code: {response.status_code}")
                return []
        except Exception as e:
            logging.error(f"Error during subdomain enumeration: {e}")
            return []

    def dns_lookup(self, record_type: str = "A") -> Dict[str, List[str]]:
        """Perform DNS lookup for the domain."""
        try:
            answers = dns.resolver.resolve(self.domain, record_type)
            return {record_type: [str(r) for r in answers]}
        except Exception as e:
            logging.error(f"DNS lookup failed: {e}")
            return {}

    def whois_lookup(self) -> Optional[Dict]:
        """Perform WHOIS lookup for the domain."""
        try:
            return whois.whois(self.domain)
        except Exception as e:
            logging.error(f"WHOIS lookup failed: {e}")
            return None

    def run_all(self) -> Dict:
        """Run all reconnaissance tasks."""
        results = {
            "subdomains": self.subdomain_enumeration(),
            "dns": self.dns_lookup(),
            "whois": self.whois_lookup()
        }
        return results

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Automated Reconnaissance Tool")
    parser.add_argument("-d", "--domain", required=True, help="Target domain")
    args = parser.parse_args()

    recon = ReconTool(args.domain)
    results = recon.run_all()

    logging.info(f"Recon results for {args.domain}:")
    for key, value in results.items():
        logging.info(f"{key}: {value}")

#Subdomain enumeration using crt.sh.
#DNS lookups for A, MX, and other records.
#WHOIS lookup for domain ownership.
#Threaded execution for parallel tasks.
#Comprehensive logging.
